(self.webpackChunkcredo_ts_docs=self.webpackChunkcredo_ts_docs||[]).push([[7918],{47083:(e,n,r)=>{"use strict";r.d(n,{Z:()=>u});var t=r(67294),o=r(86010),s=r(35281),i=r(95999);const a={admonition:"admonition_WoCw",admonitionHeading:"admonitionHeading_TMsN",admonitionIcon:"admonitionIcon_Ibzs",admonitionContent:"admonitionContent_vXIg"};const d={note:{infimaClassName:"secondary",iconComponent:function(){return t.createElement("svg",{viewBox:"0 0 14 16"},t.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:t.createElement(i.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return t.createElement("svg",{viewBox:"0 0 12 16"},t.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:t.createElement(i.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return t.createElement("svg",{viewBox:"0 0 12 16"},t.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:t.createElement(i.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return t.createElement("svg",{viewBox:"0 0 14 16"},t.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:t.createElement(i.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return t.createElement("svg",{viewBox:"0 0 16 16"},t.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:t.createElement(i.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")},holder:{infimaClassName:"holder",emoji:"\ud83d\uddc4",label:t.createElement(i.Z,{id:"theme.admonition.holder",description:"The default label used for the Caution admonition (:::holder)"},"holder")},issuer:{infimaClassName:"issuer",emoji:"\ud83d\udcc4",label:t.createElement(i.Z,{id:"theme.admonition.issuer",description:"The default label used for the Caution admonition (:::issuer)"},"issuer")},verifier:{infimaClassName:"verifier",emoji:"\ud83d\udc6e",label:t.createElement(i.Z,{id:"theme.admonition.verifier",description:"The default label used for the Verifier admonition (:::verifier)"},"verifier")},bob:{infimaClassName:"bob",emoji:"\ud83e\uddd4",label:t.createElement(i.Z,{id:"theme.admonition.bob",description:"The default label used for the Bob admonition (:::bob)"},"bob")},acme:{infimaClassName:"acme",emoji:"\ud83c\udfe2",label:t.createElement(i.Z,{id:"theme.admonition.acme",description:"The default label used for the acme admonition (:::acme)"},"acme")}},c={secondary:"note",important:"info",success:"tip",warning:"danger"};function l(e){const{mdxAdmonitionTitle:n,rest:r}=function(e){const n=t.Children.toArray(e),r=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),o=t.createElement(t.Fragment,null,n.filter((e=>e!==r)));return{mdxAdmonitionTitle:r,rest:o}}(e.children);return{...e,title:e.title??n,children:r}}function u(e){const{children:n,type:r,title:i,icon:u}=l(e),m=function(e){const n=c[e]??e,r=d[n];return r||(console.warn(`No admonition config found for admonition type "${n}". Using Info as fallback.`),d.info)}(r),p=i??m.label,{iconComponent:g,emoji:f}=m,h=u??f??t.createElement(g,null);return t.createElement("div",{className:(0,o.Z)(s.k.common.admonition,s.k.common.admonitionType(e.type),"alert",`alert--${m.infimaClassName}`,`admonition-${m.infimaClassName}`,a.admonition)},t.createElement("div",{className:a.admonitionHeading},t.createElement("span",{className:a.admonitionIcon},h),p),t.createElement("div",{className:a.admonitionContent},n))}},71415:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var t=r(67294),o=r(78397);function s(e){return t.createElement(t.Fragment,null,t.createElement(o.Z,e))}},18573:(e,n,r)=>{"use strict";r.d(n,{Z:()=>p});var t=r(87462),o=r(67294),s=r(72389),i=r(81170),a=r(72138),d=r(74477);const c=e=>e.split(" ").find((e=>e.match(/^section-/)))?.substr(8),l=(e,n)=>{const r=`start-section-${e}`,t=`end-section-${e}`,o=n.split("\n"),s=o.indexOf(o.find((e=>e.includes(r)))),i=o.indexOf(o.find((e=>e.includes(t))));return o.slice(s+1,i).join("\r\n")},u=e=>e.split(" ").find((e=>e.match(/.(js|ts)$/))),m=e=>e.split("\n").filter((e=>!e.match(/section-/))).join("\r\n");function p(e){let{children:n,...p}=e;const g=(0,s.Z)(),f=(0,d.E)(),h=function(e){return o.Children.toArray(e).some((e=>(0,o.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(n),y=f.version,b="string"==typeof h?a.Z:i.Z;if(!p.metastring)return o.createElement(b,(0,t.Z)({key:String(g)},p),h);let w;try{w=r(32502)(`./${y}/src/${u(p.metastring)}`).default}catch{}const v=c(p.metastring);let x;return w&&(x=v?l(v,w):m(w)),o.createElement(b,(0,t.Z)({key:String(g)},p),x||h)}},77058:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},92151:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  InitConfig,\n  Agent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  DidExchangeState,\n  AutoAcceptCredential,\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { Schema } from 'indy-sdk'\nimport fetch from 'node-fetch'\n\nconst getGenesisTransaction = async (url: string) => {\n  // Legacy code has a small issue with the call-signature from node-fetch\n  // @ts-ignore\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// start-section-1\nconst initializeHolderAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-holder',\n    walletConfig: {\n      id: 'demo-agent-holder',\n      key: 'demoagentholder00000000000000000',\n    },\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3002'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeIssuerAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-issuer',\n    walletConfig: {\n      id: 'demo-agent-issuer',\n      key: 'demoagentissuer00000000000000000',\n    },\n    publicDidSeed: 'demoissuerdidseed000000000000000',\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst registerSchema = async (issuer: Agent) =>\n  issuer.ledger.registerSchema({ attributes: ['name', 'age'], name: 'Identity', version: '1.0' })\n// end-section-3\n\n// start-section-4\nconst registerCredentialDefinition = async (issuer: Agent, schema: Schema) =>\n  issuer.ledger.registerCredentialDefinition({ schema, supportRevocation: false, tag: 'default' })\n// end-section-4\n\n// start-section-5\nconst setupCredentialListener = (holder: Agent) => {\n  holder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n    switch (payload.credentialRecord.state) {\n      case CredentialState.OfferReceived:\n        console.log('received a credential')\n        // custom logic here\n        await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n      case CredentialState.Done:\n        console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n        // For demo purposes we exit the program here.\n        process.exit(0)\n    }\n  })\n}\n// end-section-5\n\n// start-section-6\nconst issueCredential = async (issuer: Agent, credentialDefinitionId: string, connectionId: string) =>\n  issuer.credentials.offerCredential({\n    protocolVersion: 'v1',\n    connectionId,\n    credentialFormats: {\n      indy: {\n        credentialDefinitionId,\n        attributes: [\n          { name: 'name', value: 'Jane Doe' },\n          { name: 'age', value: '23' },\n        ],\n      },\n    },\n  })\n// end-section-6\n\nconst createNewInvitation = async (issuer: Agent) => {\n  const outOfBandRecord = await issuer.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n\nconst receiveInvitation = async (holder: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await holder.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n\nconst setupConnectionListener = (\n  issuer: Agent,\n  outOfBandRecord: OutOfBandRecord,\n  cb: (...args: any) => Promise<unknown>\n) => {\n  issuer.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, async ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      await cb(payload.connectionRecord.id)\n    }\n  })\n}\n\nconst flow = (issuer: Agent) => async (connectionId: string) => {\n  console.log('Registering the schema...')\n  const schema = await registerSchema(issuer)\n  console.log('Registering the credential definition...')\n  const credentialDefinition = await registerCredentialDefinition(issuer, schema)\n  console.log('Issuing the credential...')\n  await issueCredential(issuer, credentialDefinition.id, connectionId)\n}\n\nconst run = async () => {\n  console.log('Initializing the holder...')\n  const holder = await initializeHolderAgent()\n  console.log('Initializing the issuer...')\n  const issuer = await initializeIssuerAgent()\n\n  console.log('Initializing the credential listener...')\n  setupCredentialListener(holder)\n\n  console.log('Initializing the connection...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(issuer)\n  setupConnectionListener(issuer, outOfBandRecord, flow(issuer))\n  await receiveInvitation(holder, invitationUrl)\n}\n\nvoid run()\n"},3288:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},60420:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},45343:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { AskarModule } from '@aries-framework/askar'\nimport {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n  ConnectionsModule,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n  }\n\n  // A new instance of an agent is created here\n  // Askar can also be replaced by the indy-sdk if required\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  // Askar can also be replaced by the indy-sdk if required\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},7283:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  DidsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  WsOutboundTransport,\n  Agent,\n  CredentialsModule,\n  V2CredentialProtocol,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport {\n  AnonCredsCredentialFormatService,\n  AnonCredsModule,\n  LegacyIndyCredentialFormatService,\n} from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst issuerConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-issuer',\n  walletConfig: {\n    id: 'wallet-id-issuer',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst holderConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-holder',\n  walletConfig: {\n    id: 'wallet-id-holder',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nconst issuer = new Agent({\n  config: issuerConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nissuer.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nissuer.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nissuer.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-1\n\n// start-section-2\nconst holder = new Agent({\n  config: holderConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nholder.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nholder.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nholder.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-2\n\n// start-section-3\nholder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n  switch (payload.credentialRecord.state) {\n    case CredentialState.OfferReceived:\n      console.log('received a credential')\n      // custom logic here\n      await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n    case CredentialState.Done:\n      console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n      // For demo purposes we exit the program here.\n      process.exit(0)\n  }\n})\n// end-section-3\n\n// start-section-4\nconst indyCredentialExchangeRecord = await issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    indy: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-4\n\n// start-section-5\nconst anonCredsCredentialExchangeRecord = issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    anoncreds: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-5\n"},8276:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  Agent,\n  ConsoleLogger,\n  HttpOutboundTransport,\n  InitConfig,\n  LogLevel,\n  MediationRecipientModule,\n  WsOutboundTransport,\n} from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport { agentDependencies } from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// start-section-1\nconst name = 'alice'\n\n// paste your invitation url here\n// or use the current invitation-url to connect to the public animo-mediator.\nconst mediatorInvitationUrl =\n  'https://mediator.dev.animo.id/invite?oob=eyJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvb3V0LW9mLWJhbmQvMS4xL2ludml0YXRpb24iLCJAaWQiOiIyMDc1MDM4YS05ZGU3LTRiODItYWUxYi1jNzBmNDg4MjYzYTciLCJsYWJlbCI6IkFuaW1vIE1lZGlhdG9yIiwiYWNjZXB0IjpbImRpZGNvbW0vYWlwMSIsImRpZGNvbW0vYWlwMjtlbnY9cmZjMTkiXSwiaGFuZHNoYWtlX3Byb3RvY29scyI6WyJodHRwczovL2RpZGNvbW0ub3JnL2RpZGV4Y2hhbmdlLzEuMCIsImh0dHBzOi8vZGlkY29tbS5vcmcvY29ubmVjdGlvbnMvMS4wIl0sInNlcnZpY2VzIjpbeyJpZCI6IiNpbmxpbmUtMCIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vbWVkaWF0b3IuZGV2LmFuaW1vLmlkIiwidHlwZSI6ImRpZC1jb21tdW5pY2F0aW9uIiwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtvSG9RTUphdU5VUE5OV1pQcEw3RGs1SzNtQ0NDMlBpNDJGY3FwR25iampMcSJdLCJyb3V0aW5nS2V5cyI6W119LHsiaWQiOiIjaW5saW5lLTEiLCJzZXJ2aWNlRW5kcG9pbnQiOiJ3c3M6Ly9tZWRpYXRvci5kZXYuYW5pbW8uaWQiLCJ0eXBlIjoiZGlkLWNvbW11bmljYXRpb24iLCJyZWNpcGllbnRLZXlzIjpbImRpZDprZXk6ejZNa29Ib1FNSmF1TlVQTk5XWlBwTDdEazVLM21DQ0MyUGk0MkZjcXBHbmJqakxxIl0sInJvdXRpbmdLZXlzIjpbXX1dfQ'\n\nconst agentConfig: InitConfig = {\n  label: `Aries Framework JavaScript ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  logger: new ConsoleLogger(LogLevel.trace),\n}\n\nconst alice = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    mediationRecipient: new MediationRecipientModule({\n      mediatorInvitationUrl,\n    }),\n    indySdk: new IndySdkModule({ indySdk }),\n  },\n})\n\nalice.registerOutboundTransport(new HttpOutboundTransport())\nalice.registerOutboundTransport(new WsOutboundTransport())\n\nawait alice.initialize()\n// end-section-1\n"},50768:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  Agent,\n  ConnectionsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  MediationStateChangedEvent,\n  MediatorModule,\n  RoutingEventTypes,\n} from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport { HttpInboundTransport, agentDependencies } from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// start-section-1\nconst name = 'mediator'\nconst port = 3001\n\nconst agentConfig: InitConfig = {\n  label: `Aries Framework JavaScript ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  endpoints: [`http://localhost:${port}`],\n}\n\nconst mediator = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    indySdk: new IndySdkModule({ indySdk }),\n    mediator: new MediatorModule({\n      autoAcceptMediationRequests: true,\n    }),\n    connections: new ConnectionsModule({\n      autoAcceptConnections: true,\n    }),\n  },\n})\n\nmediator.registerOutboundTransport(new HttpOutboundTransport())\nmediator.registerInboundTransport(new HttpInboundTransport({ port }))\n\nawait mediator.initialize()\nconst mediatorOutOfBandRecord = await mediator.oob.createInvitation({ multiUseInvitation: true })\n\nconst mediatiorInvitationUrl = mediatorOutOfBandRecord.outOfBandInvitation.toUrl({\n  domain: `http://localhost:${port}`,\n})\nconsole.log(mediatiorInvitationUrl)\n// end-section-1\n\nmediator.events\n  .observable<MediationStateChangedEvent>(RoutingEventTypes.MediationStateChanged)\n  .subscribe(({ payload }) => {\n    console.log(`${name} mediation state: ${payload.mediationRecord.state}`)\n  })\n"},62055:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { DidsModule, InitConfig, KeyType, LogLevel, TypedArrayEncoder } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs-register-schema-and-cred-def',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n} from '@aries-framework/cheqd'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // We do this to have access to a wallet\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry(), new CheqdAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar(), new CheqdDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver(), new CheqdDidResolver()],\n    }),\n  },\n})\n// end-section-1\n\n// start-section-2\nconst seed = TypedArrayEncoder.fromString(`<seed>`) // What you input on bcovrin. Should be kept secure in production!\nconst unqualifiedIndyDid = `<unqualifiedIndyDid>` // will be returned after registering seed on bcovrin\nconst indyDid = `did:indy:bcovrin:test:${unqualifiedIndyDid}`\n\nconst cheqdDid = await agent.dids.create({\n  method: 'cheqd',\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n\nawait agent.dids.import({\n  did: '<did>',\n  overwrite: true,\n  privateKeys: [\n    {\n      privateKey: seed,\n      keyType: KeyType.Ed25519,\n    },\n  ],\n})\n// end-section-2\n\n// start-section-3\nconst schemaResult = await agent.modules.anoncreds.registerSchema({\n  schema: {\n    attrNames: ['name'],\n    issuerId: '<did>',\n    name: 'Example Schema to register',\n    version: '1.0.0',\n  },\n  options: {},\n})\n\nif (schemaResult.schemaState.state === 'failed') {\n  throw new Error(`Error creating schema: ${schemaResult.schemaState.reason}`)\n}\n// end-section-3\n\n// start-section-4\nconst credentialDefinitionResult = await agent.modules.anoncreds.registerCredentialDefinition({\n  credentialDefinition: {\n    tag: 'default',\n    issuerId: '<did>',\n    schemaId: schemaResult.schemaState.schemaId,\n  },\n  options: {},\n})\n\nif (credentialDefinitionResult.credentialDefinitionState.state === 'failed') {\n  throw new Error(\n    `Error creating credential definition: ${credentialDefinitionResult.credentialDefinitionState.reason}`\n  )\n}\n// end-section-4\n"},96596:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { IndyVdrAnonCredsRegistry } from '@aries-framework/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},13099:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { IndyVdrAnonCredsRegistry } from '@aries-framework/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},78757:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},93716:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},12107:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { DidDocumentService, InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent, DidsModule, KeyType, DidDocument } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n  CheqdDidCreateOptions,\n} from '@aries-framework/cheqd'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    dids: new DidsModule({\n      registrars: [new CheqdDidRegistrar()],\n      resolvers: [new CheqdDidResolver()],\n    }),\n\n    // AnonCreds\n    anoncreds: new AnonCredsModule({\n      registries: [new CheqdAnonCredsRegistry()],\n    }),\n\n    // Add cheqd module\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n\n// start-section-2\n\n// create a key pair\nconst key = await agent.wallet.createKey({\n  keyType: KeyType.Ed25519,\n})\n\n// encode public key according to the verification method\nconst ed25519PublicKeyBase58 = key.publicKeyBase58\n\n// Create a DID\nawait agent.dids.create<CheqdDidCreateOptions>({\n  method: 'cheqd',\n  secret: {},\n  options: {\n    network: 'testnet',\n  },\n  didDocument: new DidDocument({\n    id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n    controller: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1',\n        type: 'Ed25519VerificationKey2018',\n        controller: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n        publicKeyBase58: ed25519PublicKeyBase58,\n      },\n    ],\n    authentication: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1'],\n  }),\n})\n// end-section-2\n\n// start-section-3\nawait agent.dids.create({\n  method: 'cheqd',\n  // the secret contains a the verification method type and id\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  // an optional methodSpecificIdAlgo parameter\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n// end-section-3\n\n// start-section-4\nawait agent.dids.update({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // Updates DID Document with an additional verification method if provided\n  secret: {\n    verificationMethod: {\n      id: 'key-2',\n      type: 'JsonWebKey2020',\n    },\n  },\n  didDocument: {\n    id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n    controller: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1',\n        type: 'Ed25519VerificationKey2020',\n        controller: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n        publicKeyMultibase: 'z6MknkzLUEP5cxqqsaysNMWoh8NJRb3YsowTCj2D6yhwyEdj',\n      },\n    ],\n    authentication: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1'],\n    // updates did document with a service block\n    service: [\n      new DidDocumentService({\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#rand',\n        type: 'rand',\n        serviceEndpoint: 'https://rand.in',\n      }),\n    ],\n  },\n})\n// end-section-4\n\n// start-section-5\nawait agent.dids.deactivate({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // an optional versionId parameter\n  options: {\n    versionId: '3.0',\n  },\n})\n// end-section-5\n"},84056:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport { Agent, InitConfig } from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport {\n  agentDependencies,\n  IndySdkPostgresStorageConfig,\n  loadIndySdkPostgresPlugin,\n  IndySdkPostgresWalletScheme,\n} from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// IndySdkPostgresStorageConfig defines interface for the Postgres plugin configuration.\nconst storageConfig = {\n  type: 'postgres_storage',\n  config: {\n    url: 'localhost:5432',\n    wallet_scheme: IndySdkPostgresWalletScheme.DatabasePerWallet,\n  },\n  credentials: {\n    account: 'postgres',\n    password: 'postgres',\n    admin_account: 'postgres',\n    admin_password: 'postgres',\n  },\n} satisfies IndySdkPostgresStorageConfig\n\n// load the postgres wallet plugin before agent initialization\nloadIndySdkPostgresPlugin(storageConfig.config, storageConfig.credentials)\n\nconst agentConfig: InitConfig = {\n  label: 'My Agent',\n  // walletConfig.id and walletConfig.key are still required\n  walletConfig: {\n    id: 'walletId',\n    key: 'testKey0000000000000000000000000',\n    // storage is added and defines the postgres plugin configuration\n    storage: storageConfig,\n  },\n}\n\nconst agent = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n"},51002:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport indySdk from 'indy-sdk-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},12863:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport indySdk from 'indy-sdk'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nawait agent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},99031:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { IndyVdrModule } from '@aries-framework/indy-vdr'\n\nconst modules = {\n  indyVdr: new IndyVdrModule({\n    indyVdr,\n    networks: [\n      {\n        indyNamespace: 'bcovrin:test',\n        isProduction: false,\n        genesisTransactions: '<genesis_transactions>',\n        connectOnStartup: true,\n      },\n    ],\n  }),\n}\n// end-section-1\n"},44279:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-react-native'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},54437:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},46121:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// TODO: we probably want to make this more specific to React Native,\n// so using it in a components and recommending to use the react hooks\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},61031:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { HttpInboundTransport } from '@aries-framework/node'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},36033:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { AskarModule } from '@credo-ts/askar'\nimport {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n  ConnectionsModule,\n} from '@credo-ts/core'\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},76250:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  DidsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  WsOutboundTransport,\n  Agent,\n  CredentialsModule,\n  V2CredentialProtocol,\n} from '@credo-ts/core'\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport {\n  AnonCredsCredentialFormatService,\n  AnonCredsModule,\n  LegacyIndyCredentialFormatService,\n} from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst issuerConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-issuer',\n  walletConfig: {\n    id: 'wallet-id-issuer',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst holderConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-holder',\n  walletConfig: {\n    id: 'wallet-id-holder',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nconst issuer = new Agent({\n  config: issuerConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nissuer.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nissuer.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nissuer.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-1\n\n// start-section-2\nconst holder = new Agent({\n  config: holderConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nholder.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nholder.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nholder.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-2\n\n// start-section-3\nholder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n  switch (payload.credentialRecord.state) {\n    case CredentialState.OfferReceived:\n      console.log('received a credential')\n      // custom logic here\n      await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n      break\n    case CredentialState.Done:\n      console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n      // For demo purposes we exit the program here.\n      process.exit(0)\n  }\n})\n// end-section-3\n\n// start-section-4\nconst indyCredentialExchangeRecord = await issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    indy: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-4\n\n// start-section-5\nconst anonCredsCredentialExchangeRecord = issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    anoncreds: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-5\n"},98249:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  Agent,\n  ConsoleLogger,\n  HttpOutboundTransport,\n  InitConfig,\n  LogLevel,\n  MediationRecipientModule,\n  WsOutboundTransport,\n} from '@credo-ts/core'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { agentDependencies } from '@credo-ts/node'\n\n// start-section-1\nconst name = 'alice'\n\n// paste your invitation url here\n// or use the current invitation-url to connect to the public animo-mediator.\nconst mediatorInvitationUrl =\n  'https://mediator.dev.animo.id/invite?oob=eyJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvb3V0LW9mLWJhbmQvMS4xL2ludml0YXRpb24iLCJAaWQiOiIyMDc1MDM4YS05ZGU3LTRiODItYWUxYi1jNzBmNDg4MjYzYTciLCJsYWJlbCI6IkFuaW1vIE1lZGlhdG9yIiwiYWNjZXB0IjpbImRpZGNvbW0vYWlwMSIsImRpZGNvbW0vYWlwMjtlbnY9cmZjMTkiXSwiaGFuZHNoYWtlX3Byb3RvY29scyI6WyJodHRwczovL2RpZGNvbW0ub3JnL2RpZGV4Y2hhbmdlLzEuMCIsImh0dHBzOi8vZGlkY29tbS5vcmcvY29ubmVjdGlvbnMvMS4wIl0sInNlcnZpY2VzIjpbeyJpZCI6IiNpbmxpbmUtMCIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vbWVkaWF0b3IuZGV2LmFuaW1vLmlkIiwidHlwZSI6ImRpZC1jb21tdW5pY2F0aW9uIiwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtvSG9RTUphdU5VUE5OV1pQcEw3RGs1SzNtQ0NDMlBpNDJGY3FwR25iampMcSJdLCJyb3V0aW5nS2V5cyI6W119LHsiaWQiOiIjaW5saW5lLTEiLCJzZXJ2aWNlRW5kcG9pbnQiOiJ3c3M6Ly9tZWRpYXRvci5kZXYuYW5pbW8uaWQiLCJ0eXBlIjoiZGlkLWNvbW11bmljYXRpb24iLCJyZWNpcGllbnRLZXlzIjpbImRpZDprZXk6ejZNa29Ib1FNSmF1TlVQTk5XWlBwTDdEazVLM21DQ0MyUGk0MkZjcXBHbmJqakxxIl0sInJvdXRpbmdLZXlzIjpbXX1dfQ'\n\nconst agentConfig: InitConfig = {\n  label: `Credo ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  logger: new ConsoleLogger(LogLevel.trace),\n}\n\nconst alice = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    mediationRecipient: new MediationRecipientModule({\n      mediatorInvitationUrl,\n    }),\n    askar: new AskarModule({ ariesAskar }),\n  },\n})\n\nalice.registerOutboundTransport(new HttpOutboundTransport())\nalice.registerOutboundTransport(new WsOutboundTransport())\n\nawait alice.initialize()\n// end-section-1\n"},71676:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import {\n  Agent,\n  ConnectionsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  MediationStateChangedEvent,\n  MediatorModule,\n  RoutingEventTypes,\n} from '@credo-ts/core'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { HttpInboundTransport, agentDependencies } from '@credo-ts/node'\n\n// start-section-1\nconst name = 'mediator'\nconst port = 3001\n\nconst agentConfig: InitConfig = {\n  label: `Credo ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  endpoints: [`http://localhost:${port}`],\n}\n\nconst mediator = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({ ariesAskar }),\n    mediator: new MediatorModule({\n      autoAcceptMediationRequests: true,\n    }),\n    connections: new ConnectionsModule({\n      autoAcceptConnections: true,\n    }),\n  },\n})\n\nmediator.registerOutboundTransport(new HttpOutboundTransport())\nmediator.registerInboundTransport(new HttpInboundTransport({ port }))\n\nawait mediator.initialize()\nconst mediatorOutOfBandRecord = await mediator.oob.createInvitation({ multiUseInvitation: true })\n\nconst mediatiorInvitationUrl = mediatorOutOfBandRecord.outOfBandInvitation.toUrl({\n  domain: `http://localhost:${port}`,\n})\nconsole.log(mediatiorInvitationUrl)\n// end-section-1\n\nmediator.events\n  .observable<MediationStateChangedEvent>(RoutingEventTypes.MediationStateChanged)\n  .subscribe(({ payload }) => {\n    console.log(`${name} mediation state: ${payload.mediationRecord.state}`)\n  })\n"},71104:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { DidsModule, InitConfig, KeyType, TypedArrayEncoder } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs-register-schema-and-cred-def',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n} from '@credo-ts/cheqd'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // We do this to have access to a wallet\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry(), new CheqdAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar(), new CheqdDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver(), new CheqdDidResolver()],\n    }),\n  },\n})\n// end-section-1\n\n// start-section-2\nconst seed = TypedArrayEncoder.fromString(`<seed>`) // What you input on bcovrin. Should be kept secure in production!\nconst unqualifiedIndyDid = `<unqualifiedIndyDid>` // will be returned after registering seed on bcovrin\nconst indyDid = `did:indy:bcovrin:test:${unqualifiedIndyDid}`\n\nconst cheqdDid = await agent.dids.create({\n  method: 'cheqd',\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n\nawait agent.dids.import({\n  did: '<did>',\n  overwrite: true,\n  privateKeys: [\n    {\n      privateKey: seed,\n      keyType: KeyType.Ed25519,\n    },\n  ],\n})\n// end-section-2\n\n// start-section-3\nconst schemaResult = await agent.modules.anoncreds.registerSchema({\n  schema: {\n    attrNames: ['name'],\n    issuerId: '<did>',\n    name: 'Example Schema to register',\n    version: '1.0.0',\n  },\n  options: {},\n})\n\nif (schemaResult.schemaState.state === 'failed') {\n  throw new Error(`Error creating schema: ${schemaResult.schemaState.reason}`)\n}\n// end-section-3\n\n// start-section-4\nconst credentialDefinitionResult = await agent.modules.anoncreds.registerCredentialDefinition({\n  credentialDefinition: {\n    tag: 'default',\n    issuerId: '<did>',\n    schemaId: schemaResult.schemaState.schemaId,\n  },\n  options: {\n    supportRevocation: false,\n  },\n})\n\nif (credentialDefinitionResult.credentialDefinitionState.state === 'failed') {\n  throw new Error(\n    `Error creating credential definition: ${credentialDefinitionResult.credentialDefinitionState.reason}`\n  )\n}\n// end-section-4\n"},50723:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig, SdJwtVcRecord, W3cCredentialRecord } from '@credo-ts/core'\nimport { AskarModule } from '@credo-ts/askar'\n\nconst issuerConfig: InitConfig = {\n  label: 'openid4vc-issuer',\n  walletConfig: {\n    id: 'openid4vc-issuer',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst holderConfig: InitConfig = {\n  label: 'openid4vc-holder',\n  walletConfig: {\n    id: 'openid4vc-holder',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-4\nimport {\n  OpenId4VcIssuanceSessionStateChangedEvent,\n  OpenId4VcIssuerEvents,\n  OpenId4VcVerificationSessionState,\n  OpenId4VcVerificationSessionStateChangedEvent,\n  OpenId4VcVerifierEvents,\n  OpenId4VciCredentialFormatProfile,\n  OpenId4VciCredentialRequestToCredentialMapper,\n} from '@credo-ts/openid4vc'\n\nconst credentialRequestToCredentialMapper: OpenId4VciCredentialRequestToCredentialMapper = async ({\n  // agent context for the current wallet / tenant\n  agentContext,\n  // the credential offer related to the credential request\n  credentialOffer,\n  // the received credential request\n  credentialRequest,\n  // the list of credentialsSupported entries\n  credentialsSupported,\n  // the cryptographic binding provided by the holder in the credential request proof\n  holderBinding,\n  // the issuance session associated with the credential request and offer\n  issuanceSession,\n}) => {\n  const firstSupported = credentialsSupported[0]\n\n  // We only support vc+sd-jwt in this example, but you can add more formats\n  if (firstSupported.format !== OpenId4VciCredentialFormatProfile.SdJwtVc) {\n    throw new Error('Only vc+sd-jwt is supported')\n  }\n\n  // We only support AcmeCorpEmployee in this example, but you can support any type\n  if (firstSupported.vct !== 'AcmeCorpEmployee') {\n    throw new Error('Only AcmeCorpEmployee is supported')\n  }\n\n  // find the first did:key did in our wallet. You can modify this based on your needs\n  const didsApi = agentContext.dependencyManager.resolve(DidsApi)\n  const [didKeyDidRecord] = await didsApi.getCreatedDids({\n    method: 'key',\n  })\n\n  const didKey = DidKey.fromDid(didKeyDidRecord.did)\n  const didUrl = `${didKey.did}#${didKey.key.fingerprint}`\n\n  return {\n    credentialSupportedId: firstSupported.id,\n    format: 'vc+sd-jwt',\n    // We can provide the holderBinding as is, if we don't want to make changes\n    holder: holderBinding,\n    payload: {\n      vct: firstSupported.vct,\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n    disclosureFrame: {\n      _sd: ['lastName'],\n    },\n    issuer: {\n      method: 'did',\n      didUrl,\n    },\n  }\n}\n\n// end-section-4\n\n// start-section-1\nimport { Agent, DidsApi, DifPresentationExchangeService, KeyType } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport express, { Router } from 'express'\nimport { OpenId4VcIssuerModule, OpenId4VcVerifierModule } from '@credo-ts/openid4vc'\n\n// Create two express routers, all endpoints for the\n// issuer and verifier will be added to these routers\nconst verifierRouter = Router()\nconst issuerRouter = Router()\n\n// Register the routers on the express server. The path should match\n// with the baseUrl you configure in the modules below.\nconst app = express()\napp.use('/oid4vci', issuerRouter)\napp.use('/siop', verifierRouter)\n\nconst issuer = new Agent({\n  config: issuerConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    openId4VcIssuer: new OpenId4VcIssuerModule({\n      baseUrl: 'http://127.0.0.1:3000/oid4vci',\n\n      // If no router is passed, one will be created.\n      // you still have to register the router on your express server\n      // but you can access it on agent.modules.openId4VcIssuer.config.router\n      // It works the same for verifier: agent.modules.openId4VcVerifier.config.router\n      router: issuerRouter,\n\n      // Each of the endpoints can have configuration associated with it, such as the\n      // path (under the baseUrl) to use for the endpoints.\n      endpoints: {\n        // The credentialRequestToCredentialMapper is the only required endpoint\n        // configuration that must be provided. This method is called whenever a\n        // credential request has been received for an offer we created. The callback should\n        // return the issued credential to return in the credential response to the holder.\n        credential: {\n          credentialRequestToCredentialMapper,\n        },\n      },\n    }),\n\n    // the base URL of the verifier, the router\n    openId4VcVerifier: new OpenId4VcVerifierModule({\n      baseUrl: 'http://127.0.0.1:3000/siop',\n\n      router: verifierRouter,\n    }),\n  },\n})\n\n// listen on port 3000 for the openid4vc app\napp.listen(3000)\n// end-section-1\n\nawait issuer\n  .initialize()\n  .then(() => {\n    console.log('Issuer agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the issuer agent! Message: ${e}`)\n  })\n\n// we use the same agent for the verifier, but the tutorial uses verifier.xxx\nconst verifier = issuer\n\n// start-section-2\nimport { JwaSignatureAlgorithm } from '@credo-ts/core'\n\n// Create an issuer with one supported credential: AcmeCorpEmployee\nconst openid4vcIssuer = await issuer.modules.openId4VcIssuer.createIssuer({\n  display: [\n    {\n      name: 'ACME Corp.',\n      description: 'ACME Corp. is a company that provides the best services.',\n      text_color: '#000000',\n      background_color: '#FFFFFF',\n      logo: {\n        url: 'https://acme.com/logo.png',\n        alt_text: 'ACME Corp. logo',\n      },\n    },\n  ],\n  credentialsSupported: [\n    {\n      format: 'vc+sd-jwt',\n      vct: 'AcmeCorpEmployee',\n      id: 'AcmeCorpEmployee',\n      cryptographic_binding_methods_supported: ['did:key'],\n      cryptographic_suites_supported: [JwaSignatureAlgorithm.ES256],\n    },\n  ],\n})\n\n// Create a did:key that we will use for issuance\nconst issuerDidResult = await issuer.dids.create<KeyDidCreateOptions>({\n  method: 'key',\n  options: {\n    keyType: KeyType.Ed25519,\n  },\n})\n\nif (issuerDidResult.didState.state !== 'finished') {\n  throw new Error('DID creation failed.')\n}\n// end-section-2\n\n// start-section-3\nconst { credentialOffer, issuanceSession } = await issuer.modules.openId4VcIssuer.createCredentialOffer({\n  issuerId: openid4vcIssuer.issuerId,\n  // values must match the `id` of the credential supported by the issuer\n  offeredCredentials: ['AcmeCorpEmployee'],\n\n  // Only pre-authorized code flow is supported\n  preAuthorizedCodeFlowConfig: {\n    userPinRequired: false,\n  },\n\n  // You can store any metadata about the issuance here\n  issuanceMetadata: {\n    someKey: 'someValue',\n  },\n})\n\n// Listen and react to changes in the issuance session\nissuer.events.on<OpenId4VcIssuanceSessionStateChangedEvent>(\n  OpenId4VcIssuerEvents.IssuanceSessionStateChanged,\n  (event) => {\n    if (event.payload.issuanceSession.id === issuanceSession.id) {\n      console.log('Issuance session state changed to ', event.payload.issuanceSession.state)\n    }\n  }\n)\n// end-section-3\n\n// start-section-5\nimport { OpenId4VcHolderModule } from '@credo-ts/openid4vc'\n\nconst holder = new Agent({\n  config: holderConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n\n    // no configuration required for holder module\n    openId4VcHolderModule: new OpenId4VcHolderModule(),\n  },\n})\n// end-section-5\n\nawait holder\n  .initialize()\n  .then(() => {\n    console.log('Holder agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the holder agent! Message: ${e}`)\n  })\n\n// start-section-6\nimport { KeyDidCreateOptions, getJwkFromKey, DidKey } from '@credo-ts/core'\n\n// resolved credential offer contains the offer, metadata, etc..\nconst resolvedCredentialOffer = await holder.modules.openId4VcHolderModule.resolveCredentialOffer(credentialOffer)\nconsole.log('Resolved credential offer', JSON.stringify(resolvedCredentialOffer.credentialOfferPayload, null, 2))\n\n// issuer only supports pre-authorized flow for now\nconst credentials = await holder.modules.openId4VcHolderModule.acceptCredentialOfferUsingPreAuthorizedCode(\n  resolvedCredentialOffer,\n  {\n    credentialBindingResolver: async ({\n      supportedDidMethods,\n      keyType,\n      supportsAllDidMethods,\n      // supportsJwk now also passed\n      supportsJwk,\n      credentialFormat,\n    }) => {\n      // NOTE: example implementation. Adjust based on your needs\n      // Return the binding to the credential that should be used. Either did or jwk is supported\n\n      if (supportsAllDidMethods || supportedDidMethods?.includes('did:key')) {\n        const didResult = await holder.dids.create<KeyDidCreateOptions>({\n          method: 'key',\n          options: {\n            keyType,\n          },\n        })\n\n        if (didResult.didState.state !== 'finished') {\n          throw new Error('DID creation failed.')\n        }\n\n        const didKey = DidKey.fromDid(didResult.didState.did)\n\n        return {\n          method: 'did',\n          didUrl: `${didKey.did}#${didKey.key.fingerprint}`,\n        }\n      }\n\n      // we also support plain jwk for sd-jwt only\n      if (supportsJwk && credentialFormat === OpenId4VciCredentialFormatProfile.SdJwtVc) {\n        const key = await holder.wallet.createKey({\n          keyType,\n        })\n\n        // you now need to return an object instead of VerificationMethod instance\n        // and method 'did' or 'jwk'\n        return {\n          method: 'jwk',\n          jwk: getJwkFromKey(key),\n        }\n      }\n\n      throw new Error('Unable to create a key binding')\n    },\n  }\n)\n\nconsole.log('Received credentials', JSON.stringify(credentials, null, 2))\n\n// Store the received credentials\nconst records: Array<W3cCredentialRecord | SdJwtVcRecord> = []\nfor (const credential of credentials) {\n  if ('compact' in credential) {\n    const record = await holder.sdJwtVc.store(credential.compact)\n    records.push(record)\n  } else {\n    const record = await holder.w3cCredentials.storeCredential({\n      credential,\n    })\n    records.push(record)\n  }\n}\n// end-section-6\n\n// start-section-7\n// Create a verifier\nconst openId4VcVerifier = await verifier.modules.openId4VcVerifier.createVerifier({})\n\n// Create a did:key that we will use for signing OpenID4VP authorization requests\nconst verifierDidResult = await issuer.dids.create<KeyDidCreateOptions>({\n  method: 'key',\n  options: {\n    keyType: KeyType.Ed25519,\n  },\n})\n\nif (verifierDidResult.didState.state !== 'finished') {\n  throw new Error('DID creation failed.')\n}\n\nconst verifierDidKey = DidKey.fromDid(verifierDidResult.didState.did)\n// end-section-7\n\n// start-section-8\nconst { authorizationRequest, verificationSession } =\n  await verifier.modules.openId4VcVerifier.createAuthorizationRequest({\n    verifierId: openId4VcVerifier.verifierId,\n    requestSigner: {\n      didUrl: `${verifierDidKey.did}#${verifierDidKey.key.fingerprint}`,\n      method: 'did',\n    },\n    // Add DIF presentation exchange data\n    presentationExchange: {\n      definition: {\n        id: '9ed05140-b33b-445e-a0f0-9a23aa501868',\n        name: 'Employee Verification',\n        purpose: 'We need to verify your employee status to grant access to the employee portal',\n        input_descriptors: [\n          {\n            id: '9c98fb43-6fd5-49b1-8dcc-69bd2a378f23',\n            constraints: {\n              // Require limit disclosure\n              limit_disclosure: 'required',\n              fields: [\n                {\n                  filter: {\n                    type: 'string',\n                    const: 'AcmeCorpEmployee',\n                  },\n                  path: ['$.vct'],\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  })\n\n// Listen and react to changes in the verification session\nverifier.events.on<OpenId4VcVerificationSessionStateChangedEvent>(\n  OpenId4VcVerifierEvents.VerificationSessionStateChanged,\n  async (event) => {\n    if (event.payload.verificationSession.id === verificationSession.id) {\n      console.log('Verification session state changed to ', event.payload.verificationSession.state)\n    }\n\n    if (event.payload.verificationSession.state === OpenId4VcVerificationSessionState.ResponseVerified) {\n      const verifiedAuthorizationResponse = await verifier.modules.openId4VcVerifier.getVerifiedAuthorizationResponse(\n        verificationSession.id\n      )\n      console.log('Successfully verified presentation.', JSON.stringify(verifiedAuthorizationResponse, null, 2))\n\n      console.log('Exiting...')\n      process.exit()\n    }\n  }\n)\n// end-section-8\n\n// start-section-9\n\n// resolved credential offer contains the offer, metadata, etc..\nconst resolvedAuthorizationRequest = await holder.modules.openId4VcHolderModule.resolveSiopAuthorizationRequest(\n  authorizationRequest\n)\nconsole.log(\n  'Resolved credentials for request',\n  JSON.stringify(resolvedAuthorizationRequest.presentationExchange.credentialsForRequest, null, 2)\n)\n\nconst presentationExchangeService = holder.dependencyManager.resolve(DifPresentationExchangeService)\n// Automatically select credentials. In a wallet you could manually choose which credentials to return based on the \"resolvedAuthorizationRequest.presentationExchange.credentialsForRequest\" value\nconst selectedCredentials = presentationExchangeService.selectCredentialsForRequest(\n  resolvedAuthorizationRequest.presentationExchange.credentialsForRequest\n)\n\n// issuer only supports pre-authorized flow for now\nconst authorizationResponse = await holder.modules.openId4VcHolderModule.acceptSiopAuthorizationRequest({\n  authorizationRequest: resolvedAuthorizationRequest.authorizationRequest,\n  presentationExchange: {\n    credentials: selectedCredentials,\n  },\n})\nconsole.log('Submitted authorization response', JSON.stringify(authorizationResponse.submittedResponse, null, 2))\n// end-section-9\n"},8182:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { IndyVdrAnonCredsRegistry } from '@credo-ts/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},10902:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { IndyVdrAnonCredsRegistry } from '@credo-ts/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},93106:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},50531:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},31638:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import { DidDocumentService, InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent, DidsModule, KeyType, DidDocument } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n  CheqdDidCreateOptions,\n} from '@credo-ts/cheqd'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    dids: new DidsModule({\n      registrars: [new CheqdDidRegistrar()],\n      resolvers: [new CheqdDidResolver()],\n    }),\n\n    // AnonCreds\n    anoncreds: new AnonCredsModule({\n      registries: [new CheqdAnonCredsRegistry()],\n      anoncreds,\n    }),\n\n    // Add cheqd module\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n\n// start-section-2\n\n// create a key pair\nconst key = await agent.wallet.createKey({\n  keyType: KeyType.Ed25519,\n})\n\n// encode public key according to the verification method\nconst ed25519PublicKeyBase58 = key.publicKeyBase58\n\n// Create a DID\nawait agent.dids.create<CheqdDidCreateOptions>({\n  method: 'cheqd',\n  secret: {},\n  options: {},\n  didDocument: new DidDocument({\n    id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n    controller: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1',\n        type: 'Ed25519VerificationKey2018',\n        controller: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n        publicKeyBase58: ed25519PublicKeyBase58,\n      },\n    ],\n    authentication: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1'],\n  }),\n})\n// end-section-2\n\n// start-section-3\nawait agent.dids.create({\n  method: 'cheqd',\n  // the secret contains a the verification method type and id\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  // an optional methodSpecificIdAlgo parameter\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n// end-section-3\n\n// start-section-4\nawait agent.dids.update({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // Updates DID Document with an additional verification method if provided\n  secret: {\n    verificationMethod: {\n      id: 'key-2',\n      type: 'JsonWebKey2020',\n    },\n  },\n  didDocument: {\n    id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n    controller: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1',\n        type: 'Ed25519VerificationKey2020',\n        controller: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n        publicKeyMultibase: 'z6MknkzLUEP5cxqqsaysNMWoh8NJRb3YsowTCj2D6yhwyEdj',\n      },\n    ],\n    authentication: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1'],\n    // updates did document with a service block\n    service: [\n      new DidDocumentService({\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#rand',\n        type: 'rand',\n        serviceEndpoint: 'https://rand.in',\n      }),\n    ],\n  },\n})\n// end-section-4\n\n// start-section-5\nawait agent.dids.deactivate({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // an optional versionId parameter\n  options: {\n    versionId: '3.0',\n  },\n})\n// end-section-5\n\n// start-section-6\nawait agent.modules.cheqd.createResource('did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d', {\n  name: 'resourceName',\n  resourceType: 'resourceType',\n  id: '6de33634-6439-4e46-aa3f-bfe03606b000',\n  version: '1.0',\n  data: {\n    name: 'name',\n    age: 18,\n  },\n})\n// end-section-6\n\n// start-section-7\nawait agent.modules.cheqd.resolveResource(\n  'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d/resources/6de33634-6439-4e46-aa3f-bfe03606b000'\n)\n// end-section-7\n\n// start-section-8\nawait agent.modules.cheqd.resolveResource(\n  'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d?resourceName=resourceName&resourceType=resourceType'\n)\n// end-section-8\n"},84613:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { IndyVdrModule } from '@credo-ts/indy-vdr'\n\nconst modules = {\n  indyVdr: new IndyVdrModule({\n    indyVdr,\n    networks: [\n      {\n        indyNamespace: 'bcovrin:test',\n        isProduction: false,\n        genesisTransactions: '<genesis_transactions>',\n        connectOnStartup: true,\n      },\n    ],\n  }),\n}\n// end-section-1\n"},73995:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-react-native'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},55453:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},38461:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\n// or import from '@credo-ts/react-native' for React Native\nimport { agentDependencies } from '@credo-ts/node'\n\nimport { OpenId4VcHolderModule } from '@credo-ts/openid4vc'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // no configuration required for holder module\n    openId4VcHolderModule: new OpenId4VcHolderModule(),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},38340:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\n// OpenID4VC issuer and verifier modules only work in Node.js\nimport { agentDependencies } from '@credo-ts/node'\n\nimport express, { Router } from 'express'\nimport { OpenId4VcIssuerModule, OpenId4VcVerifierModule } from '@credo-ts/openid4vc'\n\n// Create two express routers, all endpoints for the\n// issuer and verifier will be added to these routers\nconst verifierRouter = Router()\nconst issuerRouter = Router()\n\n// Register the routers on the express server. The path should match\n// with the baseUrl you configure in the modules below.\nconst app = express()\napp.use('/oid4vci', issuerRouter)\napp.use('/siop', verifierRouter)\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    openId4VcIssuer: new OpenId4VcIssuerModule({\n      baseUrl: 'http://127.0.0.1:3000/oid4vci',\n\n      // If no router is passed, one will be created.\n      // you still have to register the router on your express server\n      // but you can access it on agent.modules.openId4VcIssuer.config.router\n      // It works the same for verifier: agent.modules.openId4VcVerifier.config.router\n      router: issuerRouter,\n\n      // Each of the endpoints can have configuration associated with it, such as the\n      // path (under the baseUrl) to use for the endpoints.\n      endpoints: {\n        // The credentialRequestToCredentialMapper is the only required endpoint\n        // configuration that must be provided. This method is called whenever a\n        // credential request has been received for an offer we created. The callback should\n        // return the issued credential to return in the credential response to the holder.\n        credential: {\n          credentialRequestToCredentialMapper: async () => {\n            throw new Error('Not implemented')\n          },\n        },\n      },\n    }),\n\n    // openId4VcVerifier module can only be used in Node.js\n    openId4VcVerifier: new OpenId4VcVerifierModule({\n      baseUrl: 'http://127.0.0.1:3000/siop',\n\n      router: verifierRouter,\n    }),\n  },\n})\n\n// listen on port 3000 for the openid4vc app.\napp.listen(3000)\n\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},1308:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport type { InitConfig } from '@credo-ts/core'\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@credo-ts/core'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// TODO: we probably want to make this more specific to React Native,\n// so using it in a components and recommending to use the react hooks\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},52537:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="// start-section-1\nimport type { InitConfig } from '@credo-ts/core'\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@credo-ts/core'\nimport { HttpInboundTransport } from '@credo-ts/node'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},32502:(e,n,r)=>{var t={"./0.3/node_modules/did-resolver/src/__tests__/resolver.test":50349,"./0.3/node_modules/did-resolver/src/__tests__/resolver.test.ts":50349,"./0.3/node_modules/did-resolver/src/resolver":55883,"./0.3/node_modules/did-resolver/src/resolver.ts":55883,"./0.3/node_modules/luxon/src/datetime":38105,"./0.3/node_modules/luxon/src/datetime.js":38105,"./0.3/node_modules/luxon/src/duration":26721,"./0.3/node_modules/luxon/src/duration.js":26721,"./0.3/node_modules/luxon/src/errors":74015,"./0.3/node_modules/luxon/src/errors.js":74015,"./0.3/node_modules/luxon/src/impl/conversions":8498,"./0.3/node_modules/luxon/src/impl/conversions.js":8498,"./0.3/node_modules/luxon/src/impl/diff":38998,"./0.3/node_modules/luxon/src/impl/diff.js":38998,"./0.3/node_modules/luxon/src/impl/digits":29310,"./0.3/node_modules/luxon/src/impl/digits.js":29310,"./0.3/node_modules/luxon/src/impl/english":4039,"./0.3/node_modules/luxon/src/impl/english.js":4039,"./0.3/node_modules/luxon/src/impl/formats":85303,"./0.3/node_modules/luxon/src/impl/formats.js":85303,"./0.3/node_modules/luxon/src/impl/formatter":84756,"./0.3/node_modules/luxon/src/impl/formatter.js":84756,"./0.3/node_modules/luxon/src/impl/invalid":80760,"./0.3/node_modules/luxon/src/impl/invalid.js":80760,"./0.3/node_modules/luxon/src/impl/locale":80114,"./0.3/node_modules/luxon/src/impl/locale.js":80114,"./0.3/node_modules/luxon/src/impl/regexParser":31990,"./0.3/node_modules/luxon/src/impl/regexParser.js":31990,"./0.3/node_modules/luxon/src/impl/tokenParser":64546,"./0.3/node_modules/luxon/src/impl/tokenParser.js":64546,"./0.3/node_modules/luxon/src/impl/util":57866,"./0.3/node_modules/luxon/src/impl/util.js":57866,"./0.3/node_modules/luxon/src/impl/zoneUtil":99776,"./0.3/node_modules/luxon/src/impl/zoneUtil.js":99776,"./0.3/node_modules/luxon/src/info":16965,"./0.3/node_modules/luxon/src/info.js":16965,"./0.3/node_modules/luxon/src/interval":61591,"./0.3/node_modules/luxon/src/interval.js":61591,"./0.3/node_modules/luxon/src/luxon":18004,"./0.3/node_modules/luxon/src/luxon.js":18004,"./0.3/node_modules/luxon/src/luxonFilled":99972,"./0.3/node_modules/luxon/src/luxonFilled.js":99972,"./0.3/node_modules/luxon/src/settings":52636,"./0.3/node_modules/luxon/src/settings.js":52636,"./0.3/node_modules/luxon/src/zone":76476,"./0.3/node_modules/luxon/src/zone.js":76476,"./0.3/node_modules/luxon/src/zones/IANAZone":43176,"./0.3/node_modules/luxon/src/zones/IANAZone.js":43176,"./0.3/node_modules/luxon/src/zones/fixedOffsetZone":61840,"./0.3/node_modules/luxon/src/zones/fixedOffsetZone.js":61840,"./0.3/node_modules/luxon/src/zones/invalidZone":85092,"./0.3/node_modules/luxon/src/zones/invalidZone.js":85092,"./0.3/node_modules/luxon/src/zones/localZone":15617,"./0.3/node_modules/luxon/src/zones/localZone.js":15617,"./0.3/src/create-a-connection":77058,"./0.3/src/create-a-connection.ts":77058,"./0.3/src/issue-a-credential":92151,"./0.3/src/issue-a-credential.ts":92151,"./0.3/src/set-up":60420,"./0.3/src/set-up-rn":3288,"./0.3/src/set-up-rn.ts":3288,"./0.3/src/set-up.ts":60420,"./0.4/src/create-a-connection":45343,"./0.4/src/create-a-connection.ts":45343,"./0.4/src/issue-a-credential":7283,"./0.4/src/issue-a-credential.ts":7283,"./0.4/src/mediation-recipient":8276,"./0.4/src/mediation-recipient.ts":8276,"./0.4/src/mediator-setup":50768,"./0.4/src/mediator-setup.ts":50768,"./0.4/src/register-schema-and-cred-def":62055,"./0.4/src/register-schema-and-cred-def.ts":62055,"./0.4/src/set-up":61031,"./0.4/src/set-up-anoncreds-rs":13099,"./0.4/src/set-up-anoncreds-rs-rn":96596,"./0.4/src/set-up-anoncreds-rs-rn.ts":96596,"./0.4/src/set-up-anoncreds-rs.ts":13099,"./0.4/src/set-up-askar":93716,"./0.4/src/set-up-askar-rn":78757,"./0.4/src/set-up-askar-rn.ts":78757,"./0.4/src/set-up-askar.ts":93716,"./0.4/src/set-up-cheqd":12107,"./0.4/src/set-up-cheqd.ts":12107,"./0.4/src/set-up-indy-sdk":12863,"./0.4/src/set-up-indy-sdk-postgres":84056,"./0.4/src/set-up-indy-sdk-postgres.ts":84056,"./0.4/src/set-up-indy-sdk-rn":51002,"./0.4/src/set-up-indy-sdk-rn.ts":51002,"./0.4/src/set-up-indy-sdk.ts":12863,"./0.4/src/set-up-indy-vdr":54437,"./0.4/src/set-up-indy-vdr-config":99031,"./0.4/src/set-up-indy-vdr-config.ts":99031,"./0.4/src/set-up-indy-vdr-rn":44279,"./0.4/src/set-up-indy-vdr-rn.ts":44279,"./0.4/src/set-up-indy-vdr.ts":54437,"./0.4/src/set-up-rn":46121,"./0.4/src/set-up-rn.ts":46121,"./0.4/src/set-up.ts":61031,"./current/node_modules/@hyperledger/anoncreds-react-native/android/src/main/AndroidManifest.xml":29838,"./current/node_modules/@hyperledger/anoncreds-react-native/android/src/main/java/org/hyperledger/anoncreds/AnoncredsModule.java":90239,"./current/node_modules/@hyperledger/anoncreds-react-native/android/src/main/java/org/hyperledger/anoncreds/AnoncredsPackage.java":31354,"./current/node_modules/@hyperledger/aries-askar-react-native/android/src/main/AndroidManifest.xml":81332,"./current/node_modules/@hyperledger/aries-askar-react-native/android/src/main/java/org/hyperledger/ariesaskar/AriesAskarModule.java":8566,"./current/node_modules/@hyperledger/aries-askar-react-native/android/src/main/java/org/hyperledger/ariesaskar/AriesAskarPackage.java":2051,"./current/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/AndroidManifest.xml":94516,"./current/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/java/org/hyperledger/indyvdr/IndyVdrModule.java":11611,"./current/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/java/org/hyperledger/indyvdr/IndyVdrPackage.java":79681,"./current/node_modules/rxjs/src/":76328,"./current/node_modules/rxjs/src/Rx.global":64147,"./current/node_modules/rxjs/src/Rx.global.js":64147,"./current/node_modules/rxjs/src/ajax":18398,"./current/node_modules/rxjs/src/ajax/":18398,"./current/node_modules/rxjs/src/ajax/index":18398,"./current/node_modules/rxjs/src/ajax/index.ts":18398,"./current/node_modules/rxjs/src/fetch":44106,"./current/node_modules/rxjs/src/fetch/":44106,"./current/node_modules/rxjs/src/fetch/index":44106,"./current/node_modules/rxjs/src/fetch/index.ts":44106,"./current/node_modules/rxjs/src/index":76328,"./current/node_modules/rxjs/src/index.ts":76328,"./current/node_modules/rxjs/src/internal/AnyCatcher":12930,"./current/node_modules/rxjs/src/internal/AnyCatcher.ts":12930,"./current/node_modules/rxjs/src/internal/AsyncSubject":58069,"./current/node_modules/rxjs/src/internal/AsyncSubject.ts":58069,"./current/node_modules/rxjs/src/internal/BehaviorSubject":49219,"./current/node_modules/rxjs/src/internal/BehaviorSubject.ts":49219,"./current/node_modules/rxjs/src/internal/Notification":71913,"./current/node_modules/rxjs/src/internal/Notification.ts":71913,"./current/node_modules/rxjs/src/internal/NotificationFactories":62590,"./current/node_modules/rxjs/src/internal/NotificationFactories.ts":62590,"./current/node_modules/rxjs/src/internal/Observable":59203,"./current/node_modules/rxjs/src/internal/Observable.ts":59203,"./current/node_modules/rxjs/src/internal/Operator":74287,"./current/node_modules/rxjs/src/internal/Operator.ts":74287,"./current/node_modules/rxjs/src/internal/ReplaySubject":62736,"./current/node_modules/rxjs/src/internal/ReplaySubject.ts":62736,"./current/node_modules/rxjs/src/internal/Scheduler":11213,"./current/node_modules/rxjs/src/internal/Scheduler.ts":11213,"./current/node_modules/rxjs/src/internal/Subject":29170,"./current/node_modules/rxjs/src/internal/Subject.ts":29170,"./current/node_modules/rxjs/src/internal/Subscriber":47811,"./current/node_modules/rxjs/src/internal/Subscriber.ts":47811,"./current/node_modules/rxjs/src/internal/Subscription":75160,"./current/node_modules/rxjs/src/internal/Subscription.ts":75160,"./current/node_modules/rxjs/src/internal/ajax/AjaxResponse":52004,"./current/node_modules/rxjs/src/internal/ajax/AjaxResponse.ts":52004,"./current/node_modules/rxjs/src/internal/ajax/ajax":55791,"./current/node_modules/rxjs/src/internal/ajax/ajax.ts":55791,"./current/node_modules/rxjs/src/internal/ajax/errors":49930,"./current/node_modules/rxjs/src/internal/ajax/errors.ts":49930,"./current/node_modules/rxjs/src/internal/ajax/getXHRResponse":66594,"./current/node_modules/rxjs/src/internal/ajax/getXHRResponse.ts":66594,"./current/node_modules/rxjs/src/internal/ajax/types":33731,"./current/node_modules/rxjs/src/internal/ajax/types.ts":33731,"./current/node_modules/rxjs/src/internal/config":17138,"./current/node_modules/rxjs/src/internal/config.ts":17138,"./current/node_modules/rxjs/src/internal/firstValueFrom":12451,"./current/node_modules/rxjs/src/internal/firstValueFrom.ts":12451,"./current/node_modules/rxjs/src/internal/lastValueFrom":70284,"./current/node_modules/rxjs/src/internal/lastValueFrom.ts":70284,"./current/node_modules/rxjs/src/internal/observable/ConnectableObservable":80001,"./current/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts":80001,"./current/node_modules/rxjs/src/internal/observable/bindCallback":9808,"./current/node_modules/rxjs/src/internal/observable/bindCallback.ts":9808,"./current/node_modules/rxjs/src/internal/observable/bindCallbackInternals":39780,"./current/node_modules/rxjs/src/internal/observable/bindCallbackInternals.ts":39780,"./current/node_modules/rxjs/src/internal/observable/bindNodeCallback":46853,"./current/node_modules/rxjs/src/internal/observable/bindNodeCallback.ts":46853,"./current/node_modules/rxjs/src/internal/observable/combineLatest":24058,"./current/node_modules/rxjs/src/internal/observable/combineLatest.ts":24058,"./current/node_modules/rxjs/src/internal/observable/concat":87101,"./current/node_modules/rxjs/src/internal/observable/concat.ts":87101,"./current/node_modules/rxjs/src/internal/observable/connectable":82623,"./current/node_modules/rxjs/src/internal/observable/connectable.ts":82623,"./current/node_modules/rxjs/src/internal/observable/defer":91166,"./current/node_modules/rxjs/src/internal/observable/defer.ts":91166,"./current/node_modules/rxjs/src/internal/observable/dom/WebSocketSubject":39290,"./current/node_modules/rxjs/src/internal/observable/dom/WebSocketSubject.ts":39290,"./current/node_modules/rxjs/src/internal/observable/dom/animationFrames":66007,"./current/node_modules/rxjs/src/internal/observable/dom/animationFrames.ts":66007,"./current/node_modules/rxjs/src/internal/observable/dom/fetch":37045,"./current/node_modules/rxjs/src/internal/observable/dom/fetch.ts":37045,"./current/node_modules/rxjs/src/internal/observable/dom/webSocket":50101,"./current/node_modules/rxjs/src/internal/observable/dom/webSocket.ts":50101,"./current/node_modules/rxjs/src/internal/observable/empty":367,"./current/node_modules/rxjs/src/internal/observable/empty.ts":367,"./current/node_modules/rxjs/src/internal/observable/forkJoin":31029,"./current/node_modules/rxjs/src/internal/observable/forkJoin.ts":31029,"./current/node_modules/rxjs/src/internal/observable/from":22051,"./current/node_modules/rxjs/src/internal/observable/from.ts":22051,"./current/node_modules/rxjs/src/internal/observable/fromEvent":16273,"./current/node_modules/rxjs/src/internal/observable/fromEvent.ts":16273,"./current/node_modules/rxjs/src/internal/observable/fromEventPattern":8517,"./current/node_modules/rxjs/src/internal/observable/fromEventPattern.ts":8517,"./current/node_modules/rxjs/src/internal/observable/fromSubscribable":75735,"./current/node_modules/rxjs/src/internal/observable/fromSubscribable.ts":75735,"./current/node_modules/rxjs/src/internal/observable/generate":34758,"./current/node_modules/rxjs/src/internal/observable/generate.ts":34758,"./current/node_modules/rxjs/src/internal/observable/iif":92050,"./current/node_modules/rxjs/src/internal/observable/iif.ts":92050,"./current/node_modules/rxjs/src/internal/observable/innerFrom":41393,"./current/node_modules/rxjs/src/internal/observable/innerFrom.ts":41393,"./current/node_modules/rxjs/src/internal/observable/interval":8910,"./current/node_modules/rxjs/src/internal/observable/interval.ts":8910,"./current/node_modules/rxjs/src/internal/observable/merge":29870,"./current/node_modules/rxjs/src/internal/observable/merge.ts":29870,"./current/node_modules/rxjs/src/internal/observable/never":69848,"./current/node_modules/rxjs/src/internal/observable/never.ts":69848,"./current/node_modules/rxjs/src/internal/observable/of":7432,"./current/node_modules/rxjs/src/internal/observable/of.ts":7432,"./current/node_modules/rxjs/src/internal/observable/onErrorResumeNext":12129,"./current/node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts":12129,"./current/node_modules/rxjs/src/internal/observable/pairs":20751,"./current/node_modules/rxjs/src/internal/observable/pairs.ts":20751,"./current/node_modules/rxjs/src/internal/observable/partition":35607,"./current/node_modules/rxjs/src/internal/observable/partition.ts":35607,"./current/node_modules/rxjs/src/internal/observable/race":66859,"./current/node_modules/rxjs/src/internal/observable/race.ts":66859,"./current/node_modules/rxjs/src/internal/observable/range":73133,"./current/node_modules/rxjs/src/internal/observable/range.ts":73133,"./current/node_modules/rxjs/src/internal/observable/throwError":84558,"./current/node_modules/rxjs/src/internal/observable/throwError.ts":84558,"./current/node_modules/rxjs/src/internal/observable/timer":18339,"./current/node_modules/rxjs/src/internal/observable/timer.ts":18339,"./current/node_modules/rxjs/src/internal/observable/using":82581,"./current/node_modules/rxjs/src/internal/observable/using.ts":82581,"./current/node_modules/rxjs/src/internal/observable/zip":32127,"./current/node_modules/rxjs/src/internal/observable/zip.ts":32127,"./current/node_modules/rxjs/src/internal/operators/OperatorSubscriber":95532,"./current/node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts":95532,"./current/node_modules/rxjs/src/internal/operators/audit":45550,"./current/node_modules/rxjs/src/internal/operators/audit.ts":45550,"./current/node_modules/rxjs/src/internal/operators/auditTime":96786,"./current/node_modules/rxjs/src/internal/operators/auditTime.ts":96786,"./current/node_modules/rxjs/src/internal/operators/buffer":77427,"./current/node_modules/rxjs/src/internal/operators/buffer.ts":77427,"./current/node_modules/rxjs/src/internal/operators/bufferCount":76127,"./current/node_modules/rxjs/src/internal/operators/bufferCount.ts":76127,"./current/node_modules/rxjs/src/internal/operators/bufferTime":62259,"./current/node_modules/rxjs/src/internal/operators/bufferTime.ts":62259,"./current/node_modules/rxjs/src/internal/operators/bufferToggle":91402,"./current/node_modules/rxjs/src/internal/operators/bufferToggle.ts":91402,"./current/node_modules/rxjs/src/internal/operators/bufferWhen":6242,"./current/node_modules/rxjs/src/internal/operators/bufferWhen.ts":6242,"./current/node_modules/rxjs/src/internal/operators/catchError":98657,"./current/node_modules/rxjs/src/internal/operators/catchError.ts":98657,"./current/node_modules/rxjs/src/internal/operators/combineAll":22057,"./current/node_modules/rxjs/src/internal/operators/combineAll.ts":22057,"./current/node_modules/rxjs/src/internal/operators/combineLatest":74468,"./current/node_modules/rxjs/src/internal/operators/combineLatest.ts":74468,"./current/node_modules/rxjs/src/internal/operators/combineLatestAll":24586,"./current/node_modules/rxjs/src/internal/operators/combineLatestAll.ts":24586,"./current/node_modules/rxjs/src/internal/operators/combineLatestWith":53319,"./current/node_modules/rxjs/src/internal/operators/combineLatestWith.ts":53319,"./current/node_modules/rxjs/src/internal/operators/concat":25028,"./current/node_modules/rxjs/src/internal/operators/concat.ts":25028,"./current/node_modules/rxjs/src/internal/operators/concatAll":19784,"./current/node_modules/rxjs/src/internal/operators/concatAll.ts":19784,"./current/node_modules/rxjs/src/internal/operators/concatMap":67384,"./current/node_modules/rxjs/src/internal/operators/concatMap.ts":67384,"./current/node_modules/rxjs/src/internal/operators/concatMapTo":46756,"./current/node_modules/rxjs/src/internal/operators/concatMapTo.ts":46756,"./current/node_modules/rxjs/src/internal/operators/concatWith":27902,"./current/node_modules/rxjs/src/internal/operators/concatWith.ts":27902,"./current/node_modules/rxjs/src/internal/operators/connect":61795,"./current/node_modules/rxjs/src/internal/operators/connect.ts":61795,"./current/node_modules/rxjs/src/internal/operators/count":63791,"./current/node_modules/rxjs/src/internal/operators/count.ts":63791,"./current/node_modules/rxjs/src/internal/operators/debounce":17730,"./current/node_modules/rxjs/src/internal/operators/debounce.ts":17730,"./current/node_modules/rxjs/src/internal/operators/debounceTime":59048,"./current/node_modules/rxjs/src/internal/operators/debounceTime.ts":59048,"./current/node_modules/rxjs/src/internal/operators/defaultIfEmpty":78260,"./current/node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts":78260,"./current/node_modules/rxjs/src/internal/operators/delay":36544,"./current/node_modules/rxjs/src/internal/operators/delay.ts":36544,"./current/node_modules/rxjs/src/internal/operators/delayWhen":7365,"./current/node_modules/rxjs/src/internal/operators/delayWhen.ts":7365,"./current/node_modules/rxjs/src/internal/operators/dematerialize":22854,"./current/node_modules/rxjs/src/internal/operators/dematerialize.ts":22854,"./current/node_modules/rxjs/src/internal/operators/distinct":27291,"./current/node_modules/rxjs/src/internal/operators/distinct.ts":27291,"./current/node_modules/rxjs/src/internal/operators/distinctUntilChanged":70231,"./current/node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts":70231,"./current/node_modules/rxjs/src/internal/operators/distinctUntilKeyChanged":29789,"./current/node_modules/rxjs/src/internal/operators/distinctUntilKeyChanged.ts":29789,"./current/node_modules/rxjs/src/internal/operators/elementAt":66898,"./current/node_modules/rxjs/src/internal/operators/elementAt.ts":66898,"./current/node_modules/rxjs/src/internal/operators/endWith":80025,"./current/node_modules/rxjs/src/internal/operators/endWith.ts":80025,"./current/node_modules/rxjs/src/internal/operators/every":28154,"./current/node_modules/rxjs/src/internal/operators/every.ts":28154,"./current/node_modules/rxjs/src/internal/operators/exhaust":80543,"./current/node_modules/rxjs/src/internal/operators/exhaust.ts":80543,"./current/node_modules/rxjs/src/internal/operators/exhaustAll":84336,"./current/node_modules/rxjs/src/internal/operators/exhaustAll.ts":84336,"./current/node_modules/rxjs/src/internal/operators/exhaustMap":21781,"./current/node_modules/rxjs/src/internal/operators/exhaustMap.ts":21781,"./current/node_modules/rxjs/src/internal/operators/expand":15504,"./current/node_modules/rxjs/src/internal/operators/expand.ts":15504,"./current/node_modules/rxjs/src/internal/operators/filter":78470,"./current/node_modules/rxjs/src/internal/operators/filter.ts":78470,"./current/node_modules/rxjs/src/internal/operators/finalize":44063,"./current/node_modules/rxjs/src/internal/operators/finalize.ts":44063,"./current/node_modules/rxjs/src/internal/operators/find":32546,"./current/node_modules/rxjs/src/internal/operators/find.ts":32546,"./current/node_modules/rxjs/src/internal/operators/findIndex":98500,"./current/node_modules/rxjs/src/internal/operators/findIndex.ts":98500,"./current/node_modules/rxjs/src/internal/operators/first":78513,"./current/node_modules/rxjs/src/internal/operators/first.ts":78513,"./current/node_modules/rxjs/src/internal/operators/flatMap":60189,"./current/node_modules/rxjs/src/internal/operators/flatMap.ts":60189,"./current/node_modules/rxjs/src/internal/operators/groupBy":20559,"./current/node_modules/rxjs/src/internal/operators/groupBy.ts":20559,"./current/node_modules/rxjs/src/internal/operators/ignoreElements":26020,"./current/node_modules/rxjs/src/internal/operators/ignoreElements.ts":26020,"./current/node_modules/rxjs/src/internal/operators/isEmpty":99465,"./current/node_modules/rxjs/src/internal/operators/isEmpty.ts":99465,"./current/node_modules/rxjs/src/internal/operators/joinAllInternals":66,"./current/node_modules/rxjs/src/internal/operators/joinAllInternals.ts":66,"./current/node_modules/rxjs/src/internal/operators/last":42094,"./current/node_modules/rxjs/src/internal/operators/last.ts":42094,"./current/node_modules/rxjs/src/internal/operators/map":92211,"./current/node_modules/rxjs/src/internal/operators/map.ts":92211,"./current/node_modules/rxjs/src/internal/operators/mapTo":60001,"./current/node_modules/rxjs/src/internal/operators/mapTo.ts":60001,"./current/node_modules/rxjs/src/internal/operators/materialize":2017,"./current/node_modules/rxjs/src/internal/operators/materialize.ts":2017,"./current/node_modules/rxjs/src/internal/operators/max":40135,"./current/node_modules/rxjs/src/internal/operators/max.ts":40135,"./current/node_modules/rxjs/src/internal/operators/merge":27586,"./current/node_modules/rxjs/src/internal/operators/merge.ts":27586,"./current/node_modules/rxjs/src/internal/operators/mergeAll":2523,"./current/node_modules/rxjs/src/internal/operators/mergeAll.ts":2523,"./current/node_modules/rxjs/src/internal/operators/mergeInternals":71645,"./current/node_modules/rxjs/src/internal/operators/mergeInternals.ts":71645,"./current/node_modules/rxjs/src/internal/operators/mergeMap":96348,"./current/node_modules/rxjs/src/internal/operators/mergeMap.ts":96348,"./current/node_modules/rxjs/src/internal/operators/mergeMapTo":77133,"./current/node_modules/rxjs/src/internal/operators/mergeMapTo.ts":77133,"./current/node_modules/rxjs/src/internal/operators/mergeScan":83401,"./current/node_modules/rxjs/src/internal/operators/mergeScan.ts":83401,"./current/node_modules/rxjs/src/internal/operators/mergeWith":27125,"./current/node_modules/rxjs/src/internal/operators/mergeWith.ts":27125,"./current/node_modules/rxjs/src/internal/operators/min":8190,"./current/node_modules/rxjs/src/internal/operators/min.ts":8190,"./current/node_modules/rxjs/src/internal/operators/multicast":45380,"./current/node_modules/rxjs/src/internal/operators/multicast.ts":45380,"./current/node_modules/rxjs/src/internal/operators/observeOn":66627,"./current/node_modules/rxjs/src/internal/operators/observeOn.ts":66627,"./current/node_modules/rxjs/src/internal/operators/onErrorResumeNextWith":83521,"./current/node_modules/rxjs/src/internal/operators/onErrorResumeNextWith.ts":83521,"./current/node_modules/rxjs/src/internal/operators/pairwise":25690,"./current/node_modules/rxjs/src/internal/operators/pairwise.ts":25690,"./current/node_modules/rxjs/src/internal/operators/partition":60471,"./current/node_modules/rxjs/src/internal/operators/partition.ts":60471,"./current/node_modules/rxjs/src/internal/operators/pluck":27748,"./current/node_modules/rxjs/src/internal/operators/pluck.ts":27748,"./current/node_modules/rxjs/src/internal/operators/publish":62126,"./current/node_modules/rxjs/src/internal/operators/publish.ts":62126,"./current/node_modules/rxjs/src/internal/operators/publishBehavior":38829,"./current/node_modules/rxjs/src/internal/operators/publishBehavior.ts":38829,"./current/node_modules/rxjs/src/internal/operators/publishLast":6807,"./current/node_modules/rxjs/src/internal/operators/publishLast.ts":6807,"./current/node_modules/rxjs/src/internal/operators/publishReplay":33891,"./current/node_modules/rxjs/src/internal/operators/publishReplay.ts":33891,"./current/node_modules/rxjs/src/internal/operators/race":31715,"./current/node_modules/rxjs/src/internal/operators/race.ts":31715,"./current/node_modules/rxjs/src/internal/operators/raceWith":77153,"./current/node_modules/rxjs/src/internal/operators/raceWith.ts":77153,"./current/node_modules/rxjs/src/internal/operators/reduce":90881,"./current/node_modules/rxjs/src/internal/operators/reduce.ts":90881,"./current/node_modules/rxjs/src/internal/operators/refCount":73346,"./current/node_modules/rxjs/src/internal/operators/refCount.ts":73346,"./current/node_modules/rxjs/src/internal/operators/repeat":52435,"./current/node_modules/rxjs/src/internal/operators/repeat.ts":52435,"./current/node_modules/rxjs/src/internal/operators/repeatWhen":14668,"./current/node_modules/rxjs/src/internal/operators/repeatWhen.ts":14668,"./current/node_modules/rxjs/src/internal/operators/retry":75456,"./current/node_modules/rxjs/src/internal/operators/retry.ts":75456,"./current/node_modules/rxjs/src/internal/operators/retryWhen":77769,"./current/node_modules/rxjs/src/internal/operators/retryWhen.ts":77769,"./current/node_modules/rxjs/src/internal/operators/sample":36635,"./current/node_modules/rxjs/src/internal/operators/sample.ts":36635,"./current/node_modules/rxjs/src/internal/operators/sampleTime":72768,"./current/node_modules/rxjs/src/internal/operators/sampleTime.ts":72768,"./current/node_modules/rxjs/src/internal/operators/scan":37528,"./current/node_modules/rxjs/src/internal/operators/scan.ts":37528,"./current/node_modules/rxjs/src/internal/operators/scanInternals":19541,"./current/node_modules/rxjs/src/internal/operators/scanInternals.ts":19541,"./current/node_modules/rxjs/src/internal/operators/sequenceEqual":2387,"./current/node_modules/rxjs/src/internal/operators/sequenceEqual.ts":2387,"./current/node_modules/rxjs/src/internal/operators/share":67424,"./current/node_modules/rxjs/src/internal/operators/share.ts":67424,"./current/node_modules/rxjs/src/internal/operators/shareReplay":25189,"./current/node_modules/rxjs/src/internal/operators/shareReplay.ts":25189,"./current/node_modules/rxjs/src/internal/operators/single":66646,"./current/node_modules/rxjs/src/internal/operators/single.ts":66646,"./current/node_modules/rxjs/src/internal/operators/skip":85270,"./current/node_modules/rxjs/src/internal/operators/skip.ts":85270,"./current/node_modules/rxjs/src/internal/operators/skipLast":82550,"./current/node_modules/rxjs/src/internal/operators/skipLast.ts":82550,"./current/node_modules/rxjs/src/internal/operators/skipUntil":25672,"./current/node_modules/rxjs/src/internal/operators/skipUntil.ts":25672,"./current/node_modules/rxjs/src/internal/operators/skipWhile":57974,"./current/node_modules/rxjs/src/internal/operators/skipWhile.ts":57974,"./current/node_modules/rxjs/src/internal/operators/startWith":80515,"./current/node_modules/rxjs/src/internal/operators/startWith.ts":80515,"./current/node_modules/rxjs/src/internal/operators/subscribeOn":91483,"./current/node_modules/rxjs/src/internal/operators/subscribeOn.ts":91483,"./current/node_modules/rxjs/src/internal/operators/switchAll":10615,"./current/node_modules/rxjs/src/internal/operators/switchAll.ts":10615,"./current/node_modules/rxjs/src/internal/operators/switchMap":50520,"./current/node_modules/rxjs/src/internal/operators/switchMap.ts":50520,"./current/node_modules/rxjs/src/internal/operators/switchMapTo":38846,"./current/node_modules/rxjs/src/internal/operators/switchMapTo.ts":38846,"./current/node_modules/rxjs/src/internal/operators/switchScan":78802,"./current/node_modules/rxjs/src/internal/operators/switchScan.ts":78802,"./current/node_modules/rxjs/src/internal/operators/take":8082,"./current/node_modules/rxjs/src/internal/operators/take.ts":8082,"./current/node_modules/rxjs/src/internal/operators/takeLast":60396,"./current/node_modules/rxjs/src/internal/operators/takeLast.ts":60396,"./current/node_modules/rxjs/src/internal/operators/takeUntil":84483,"./current/node_modules/rxjs/src/internal/operators/takeUntil.ts":84483,"./current/node_modules/rxjs/src/internal/operators/takeWhile":54440,"./current/node_modules/rxjs/src/internal/operators/takeWhile.ts":54440,"./current/node_modules/rxjs/src/internal/operators/tap":86108,"./current/node_modules/rxjs/src/internal/operators/tap.ts":86108,"./current/node_modules/rxjs/src/internal/operators/throttle":48494,"./current/node_modules/rxjs/src/internal/operators/throttle.ts":48494,"./current/node_modules/rxjs/src/internal/operators/throttleTime":56364,"./current/node_modules/rxjs/src/internal/operators/throttleTime.ts":56364,"./current/node_modules/rxjs/src/internal/operators/throwIfEmpty":14796,"./current/node_modules/rxjs/src/internal/operators/throwIfEmpty.ts":14796,"./current/node_modules/rxjs/src/internal/operators/timeInterval":2372,"./current/node_modules/rxjs/src/internal/operators/timeInterval.ts":2372,"./current/node_modules/rxjs/src/internal/operators/timeout":45907,"./current/node_modules/rxjs/src/internal/operators/timeout.ts":45907,"./current/node_modules/rxjs/src/internal/operators/timeoutWith":68110,"./current/node_modules/rxjs/src/internal/operators/timeoutWith.ts":68110,"./current/node_modules/rxjs/src/internal/operators/timestamp":74740,"./current/node_modules/rxjs/src/internal/operators/timestamp.ts":74740,"./current/node_modules/rxjs/src/internal/operators/toArray":48249,"./current/node_modules/rxjs/src/internal/operators/toArray.ts":48249,"./current/node_modules/rxjs/src/internal/operators/window":48387,"./current/node_modules/rxjs/src/internal/operators/window.ts":48387,"./current/node_modules/rxjs/src/internal/operators/windowCount":5509,"./current/node_modules/rxjs/src/internal/operators/windowCount.ts":5509,"./current/node_modules/rxjs/src/internal/operators/windowTime":64999,"./current/node_modules/rxjs/src/internal/operators/windowTime.ts":64999,"./current/node_modules/rxjs/src/internal/operators/windowToggle":93742,"./current/node_modules/rxjs/src/internal/operators/windowToggle.ts":93742,"./current/node_modules/rxjs/src/internal/operators/windowWhen":71402,"./current/node_modules/rxjs/src/internal/operators/windowWhen.ts":71402,"./current/node_modules/rxjs/src/internal/operators/withLatestFrom":83254,"./current/node_modules/rxjs/src/internal/operators/withLatestFrom.ts":83254,"./current/node_modules/rxjs/src/internal/operators/zip":63671,"./current/node_modules/rxjs/src/internal/operators/zip.ts":63671,"./current/node_modules/rxjs/src/internal/operators/zipAll":54061,"./current/node_modules/rxjs/src/internal/operators/zipAll.ts":54061,"./current/node_modules/rxjs/src/internal/operators/zipWith":11412,"./current/node_modules/rxjs/src/internal/operators/zipWith.ts":11412,"./current/node_modules/rxjs/src/internal/scheduled/scheduleArray":76131,"./current/node_modules/rxjs/src/internal/scheduled/scheduleArray.ts":76131,"./current/node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable":32929,"./current/node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts":32929,"./current/node_modules/rxjs/src/internal/scheduled/scheduleIterable":65077,"./current/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts":65077,"./current/node_modules/rxjs/src/internal/scheduled/scheduleObservable":62083,"./current/node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts":62083,"./current/node_modules/rxjs/src/internal/scheduled/schedulePromise":3693,"./current/node_modules/rxjs/src/internal/scheduled/schedulePromise.ts":3693,"./current/node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike":94579,"./current/node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts":94579,"./current/node_modules/rxjs/src/internal/scheduled/scheduled":81499,"./current/node_modules/rxjs/src/internal/scheduled/scheduled.ts":81499,"./current/node_modules/rxjs/src/internal/scheduler/Action":79366,"./current/node_modules/rxjs/src/internal/scheduler/Action.ts":79366,"./current/node_modules/rxjs/src/internal/scheduler/AnimationFrameAction":59747,"./current/node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts":59747,"./current/node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler":9483,"./current/node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts":9483,"./current/node_modules/rxjs/src/internal/scheduler/AsapAction":66423,"./current/node_modules/rxjs/src/internal/scheduler/AsapAction.ts":66423,"./current/node_modules/rxjs/src/internal/scheduler/AsapScheduler":23926,"./current/node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts":23926,"./current/node_modules/rxjs/src/internal/scheduler/AsyncAction":61747,"./current/node_modules/rxjs/src/internal/scheduler/AsyncAction.ts":61747,"./current/node_modules/rxjs/src/internal/scheduler/AsyncScheduler":3385,"./current/node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts":3385,"./current/node_modules/rxjs/src/internal/scheduler/QueueAction":6775,"./current/node_modules/rxjs/src/internal/scheduler/QueueAction.ts":6775,"./current/node_modules/rxjs/src/internal/scheduler/QueueScheduler":91797,"./current/node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts":91797,"./current/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler":49598,"./current/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts":49598,"./current/node_modules/rxjs/src/internal/scheduler/animationFrame":15183,"./current/node_modules/rxjs/src/internal/scheduler/animationFrame.ts":15183,"./current/node_modules/rxjs/src/internal/scheduler/animationFrameProvider":87744,"./current/node_modules/rxjs/src/internal/scheduler/animationFrameProvider.ts":87744,"./current/node_modules/rxjs/src/internal/scheduler/asap":19890,"./current/node_modules/rxjs/src/internal/scheduler/asap.ts":19890,"./current/node_modules/rxjs/src/internal/scheduler/async":86544,"./current/node_modules/rxjs/src/internal/scheduler/async.ts":86544,"./current/node_modules/rxjs/src/internal/scheduler/dateTimestampProvider":49494,"./current/node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts":49494,"./current/node_modules/rxjs/src/internal/scheduler/immediateProvider":78581,"./current/node_modules/rxjs/src/internal/scheduler/immediateProvider.ts":78581,"./current/node_modules/rxjs/src/internal/scheduler/intervalProvider":44650,"./current/node_modules/rxjs/src/internal/scheduler/intervalProvider.ts":44650,"./current/node_modules/rxjs/src/internal/scheduler/performanceTimestampProvider":10578,"./current/node_modules/rxjs/src/internal/scheduler/performanceTimestampProvider.ts":10578,"./current/node_modules/rxjs/src/internal/scheduler/queue":17511,"./current/node_modules/rxjs/src/internal/scheduler/queue.ts":17511,"./current/node_modules/rxjs/src/internal/scheduler/timeoutProvider":44926,"./current/node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts":44926,"./current/node_modules/rxjs/src/internal/scheduler/timerHandle":3221,"./current/node_modules/rxjs/src/internal/scheduler/timerHandle.ts":3221,"./current/node_modules/rxjs/src/internal/symbol/iterator":19430,"./current/node_modules/rxjs/src/internal/symbol/iterator.ts":19430,"./current/node_modules/rxjs/src/internal/symbol/observable":77709,"./current/node_modules/rxjs/src/internal/symbol/observable.ts":77709,"./current/node_modules/rxjs/src/internal/testing/ColdObservable":73662,"./current/node_modules/rxjs/src/internal/testing/ColdObservable.ts":73662,"./current/node_modules/rxjs/src/internal/testing/HotObservable":93657,"./current/node_modules/rxjs/src/internal/testing/HotObservable.ts":93657,"./current/node_modules/rxjs/src/internal/testing/SubscriptionLog":63759,"./current/node_modules/rxjs/src/internal/testing/SubscriptionLog.ts":63759,"./current/node_modules/rxjs/src/internal/testing/SubscriptionLoggable":57968,"./current/node_modules/rxjs/src/internal/testing/SubscriptionLoggable.ts":57968,"./current/node_modules/rxjs/src/internal/testing/TestMessage":79642,"./current/node_modules/rxjs/src/internal/testing/TestMessage.ts":79642,"./current/node_modules/rxjs/src/internal/testing/TestScheduler":11810,"./current/node_modules/rxjs/src/internal/testing/TestScheduler.ts":11810,"./current/node_modules/rxjs/src/internal/types":71628,"./current/node_modules/rxjs/src/internal/types.ts":71628,"./current/node_modules/rxjs/src/internal/umd":89799,"./current/node_modules/rxjs/src/internal/umd.ts":89799,"./current/node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError":3837,"./current/node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts":3837,"./current/node_modules/rxjs/src/internal/util/EmptyError":84367,"./current/node_modules/rxjs/src/internal/util/EmptyError.ts":84367,"./current/node_modules/rxjs/src/internal/util/Immediate":89811,"./current/node_modules/rxjs/src/internal/util/Immediate.ts":89811,"./current/node_modules/rxjs/src/internal/util/NotFoundError":59086,"./current/node_modules/rxjs/src/internal/util/NotFoundError.ts":59086,"./current/node_modules/rxjs/src/internal/util/ObjectUnsubscribedError":13471,"./current/node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts":13471,"./current/node_modules/rxjs/src/internal/util/SequenceError":64389,"./current/node_modules/rxjs/src/internal/util/SequenceError.ts":64389,"./current/node_modules/rxjs/src/internal/util/UnsubscriptionError":80789,"./current/node_modules/rxjs/src/internal/util/UnsubscriptionError.ts":80789,"./current/node_modules/rxjs/src/internal/util/applyMixins":44470,"./current/node_modules/rxjs/src/internal/util/applyMixins.ts":44470,"./current/node_modules/rxjs/src/internal/util/args":93096,"./current/node_modules/rxjs/src/internal/util/args.ts":93096,"./current/node_modules/rxjs/src/internal/util/argsArgArrayOrObject":34925,"./current/node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts":34925,"./current/node_modules/rxjs/src/internal/util/argsOrArgArray":75465,"./current/node_modules/rxjs/src/internal/util/argsOrArgArray.ts":75465,"./current/node_modules/rxjs/src/internal/util/arrRemove":22478,"./current/node_modules/rxjs/src/internal/util/arrRemove.ts":22478,"./current/node_modules/rxjs/src/internal/util/createErrorClass":87302,"./current/node_modules/rxjs/src/internal/util/createErrorClass.ts":87302,"./current/node_modules/rxjs/src/internal/util/createObject":26867,"./current/node_modules/rxjs/src/internal/util/createObject.ts":26867,"./current/node_modules/rxjs/src/internal/util/errorContext":65493,"./current/node_modules/rxjs/src/internal/util/errorContext.ts":65493,"./current/node_modules/rxjs/src/internal/util/executeSchedule":48598,"./current/node_modules/rxjs/src/internal/util/executeSchedule.ts":48598,"./current/node_modules/rxjs/src/internal/util/identity":90838,"./current/node_modules/rxjs/src/internal/util/identity.ts":90838,"./current/node_modules/rxjs/src/internal/util/isArrayLike":52957,"./current/node_modules/rxjs/src/internal/util/isArrayLike.ts":52957,"./current/node_modules/rxjs/src/internal/util/isAsyncIterable":34204,"./current/node_modules/rxjs/src/internal/util/isAsyncIterable.ts":34204,"./current/node_modules/rxjs/src/internal/util/isDate":42299,"./current/node_modules/rxjs/src/internal/util/isDate.ts":42299,"./current/node_modules/rxjs/src/internal/util/isFunction":74641,"./current/node_modules/rxjs/src/internal/util/isFunction.ts":74641,"./current/node_modules/rxjs/src/internal/util/isInteropObservable":77449,"./current/node_modules/rxjs/src/internal/util/isInteropObservable.ts":77449,"./current/node_modules/rxjs/src/internal/util/isIterable":57065,"./current/node_modules/rxjs/src/internal/util/isIterable.ts":57065,"./current/node_modules/rxjs/src/internal/util/isObservable":59605,"./current/node_modules/rxjs/src/internal/util/isObservable.ts":59605,"./current/node_modules/rxjs/src/internal/util/isPromise":98840,"./current/node_modules/rxjs/src/internal/util/isPromise.ts":98840,"./current/node_modules/rxjs/src/internal/util/isReadableStreamLike":71940,"./current/node_modules/rxjs/src/internal/util/isReadableStreamLike.ts":71940,"./current/node_modules/rxjs/src/internal/util/isScheduler":64687,"./current/node_modules/rxjs/src/internal/util/isScheduler.ts":64687,"./current/node_modules/rxjs/src/internal/util/lift":37233,"./current/node_modules/rxjs/src/internal/util/lift.ts":37233,"./current/node_modules/rxjs/src/internal/util/mapOneOrManyArgs":87367,"./current/node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts":87367,"./current/node_modules/rxjs/src/internal/util/noop":25045,"./current/node_modules/rxjs/src/internal/util/noop.ts":25045,"./current/node_modules/rxjs/src/internal/util/not":66340,"./current/node_modules/rxjs/src/internal/util/not.ts":66340,"./current/node_modules/rxjs/src/internal/util/pipe":96974,"./current/node_modules/rxjs/src/internal/util/pipe.ts":96974,"./current/node_modules/rxjs/src/internal/util/reportUnhandledError":75720,"./current/node_modules/rxjs/src/internal/util/reportUnhandledError.ts":75720,"./current/node_modules/rxjs/src/internal/util/subscribeToArray":13199,"./current/node_modules/rxjs/src/internal/util/subscribeToArray.ts":13199,"./current/node_modules/rxjs/src/internal/util/throwUnobservableError":14227,"./current/node_modules/rxjs/src/internal/util/throwUnobservableError.ts":14227,"./current/node_modules/rxjs/src/internal/util/workarounds":1167,"./current/node_modules/rxjs/src/internal/util/workarounds.ts":1167,"./current/node_modules/rxjs/src/operators":50403,"./current/node_modules/rxjs/src/operators/":50403,"./current/node_modules/rxjs/src/operators/index":50403,"./current/node_modules/rxjs/src/operators/index.ts":50403,"./current/node_modules/rxjs/src/testing":89057,"./current/node_modules/rxjs/src/testing/":89057,"./current/node_modules/rxjs/src/testing/index":89057,"./current/node_modules/rxjs/src/testing/index.ts":89057,"./current/node_modules/rxjs/src/tsconfig.base":20831,"./current/node_modules/rxjs/src/tsconfig.base.json":20831,"./current/node_modules/rxjs/src/tsconfig.cjs":96817,"./current/node_modules/rxjs/src/tsconfig.cjs.json":96817,"./current/node_modules/rxjs/src/tsconfig.cjs.spec":76120,"./current/node_modules/rxjs/src/tsconfig.cjs.spec.json":76120,"./current/node_modules/rxjs/src/tsconfig.esm":47601,"./current/node_modules/rxjs/src/tsconfig.esm.json":47601,"./current/node_modules/rxjs/src/tsconfig.esm5":35169,"./current/node_modules/rxjs/src/tsconfig.esm5.json":35169,"./current/node_modules/rxjs/src/tsconfig.esm5.rollup":96009,"./current/node_modules/rxjs/src/tsconfig.esm5.rollup.json":96009,"./current/node_modules/rxjs/src/tsconfig.types":25737,"./current/node_modules/rxjs/src/tsconfig.types.json":25737,"./current/node_modules/rxjs/src/tsconfig.types.spec":70084,"./current/node_modules/rxjs/src/tsconfig.types.spec.json":70084,"./current/node_modules/rxjs/src/webSocket":82652,"./current/node_modules/rxjs/src/webSocket/":82652,"./current/node_modules/rxjs/src/webSocket/index":82652,"./current/node_modules/rxjs/src/webSocket/index.ts":82652,"./current/src/create-a-connection":36033,"./current/src/create-a-connection.ts":36033,"./current/src/issue-anoncreds-credential-didcomm":76250,"./current/src/issue-anoncreds-credential-didcomm.ts":76250,"./current/src/mediation-recipient":98249,"./current/src/mediation-recipient.ts":98249,"./current/src/mediator-setup":71676,"./current/src/mediator-setup.ts":71676,"./current/src/register-schema-and-cred-def":71104,"./current/src/register-schema-and-cred-def.ts":71104,"./current/src/sd-jwt-vc-openid4vc":50723,"./current/src/sd-jwt-vc-openid4vc.ts":50723,"./current/src/set-up":52537,"./current/src/set-up-anoncreds":10902,"./current/src/set-up-anoncreds-rn":8182,"./current/src/set-up-anoncreds-rn.ts":8182,"./current/src/set-up-anoncreds.ts":10902,"./current/src/set-up-askar":50531,"./current/src/set-up-askar-rn":93106,"./current/src/set-up-askar-rn.ts":93106,"./current/src/set-up-askar.ts":50531,"./current/src/set-up-cheqd":31638,"./current/src/set-up-cheqd.ts":31638,"./current/src/set-up-indy-vdr":55453,"./current/src/set-up-indy-vdr-config":84613,"./current/src/set-up-indy-vdr-config.ts":84613,"./current/src/set-up-indy-vdr-rn":73995,"./current/src/set-up-indy-vdr-rn.ts":73995,"./current/src/set-up-indy-vdr.ts":55453,"./current/src/set-up-openid4vc-holder":38461,"./current/src/set-up-openid4vc-holder.ts":38461,"./current/src/set-up-openid4vc-issuer-verifier":38340,"./current/src/set-up-openid4vc-issuer-verifier.ts":38340,"./current/src/set-up-rn":1308,"./current/src/set-up-rn.ts":1308,"./current/src/set-up.ts":52537};function o(e){var n=s(e);return r(n)}function s(e){if(!r.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}o.keys=function(){return Object.keys(t)},o.resolve=s,e.exports=o,o.id=32502}}]);